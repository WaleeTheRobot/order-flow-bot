name: Build, Test, and Report Coverage

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/dotnet/sdk:8.0

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y curl libssl-dev
          curl -sL https://deb.nodesource.com/setup_20.x | bash -
          apt-get install -y nodejs

      - name: Restore dependencies
        run: dotnet restore ./Tests/OrderFlowBot.Tests.csproj

  test:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/dotnet/sdk:8.0

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Tests
        run: dotnet test ./Tests/OrderFlowBot.Tests.csproj --configuration Release

  coverage:
    needs: test
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/dotnet/sdk:8.0

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          apt-get update
          apt-get install -y python3 curl bash git
          dotnet tool install --global coverlet.console
          dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Configure Git
        run: |
          git config --global --add safe.directory "*"
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Download and Install DeepSource CLI
        run: |
          curl https://deepsource.io/cli | sh

      - name: Create TestResults Directory
        run: mkdir -p TestResults

      - name: Run Tests and Generate Coverage
        run: |
          dotnet test ./Tests/OrderFlowBot.Tests.csproj \
            --configuration Release \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=cobertura \
            /p:CoverletOutput=./TestResults/coverage.cobertura.xml

      - name: Debug Information
        run: |
          echo "Current directory content:"
          ls -la
          echo "TestResults directory content:"
          ls -la TestResults || echo "TestResults directory is empty or not accessible"
          echo "Full path search for coverage file:"
          find . -name "coverage.cobertura.xml" || echo "No coverage file found"
          echo "Current working directory:"
          pwd

      - name: Upload Coverage to DeepSource
        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
        run: |
          if [ -f "./TestResults/coverage.cobertura.xml" ]; then
            ./bin/deepsource report \
              --analyzer test-coverage \
              --key csharp \
              --value-file ./TestResults/coverage.cobertura.xml
          else
            echo "Coverage file not found!"
            exit 1
          fi
